{"remainingRequest":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/components/AddTemplate.vue?vue&type=style&index=0&id=33d320bb&scoped=true&lang=css&","dependencies":[{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/components/AddTemplate.vue","mtime":1618221568000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jb250ZW50IHsNCiAgaGVpZ2h0OiAxMDAlOw0KICB3aWR0aDogMTAwJTsNCiAgbWFyZ2luOiAwOw0KICBwYWRkaW5nOiAwOw0KICBvdmVyZmxvdy15OiBoaWRkZW47DQogIGJhY2tncm91bmQtY29sb3I6ICMyZTJkMmQ7DQogIGNvbG9yOiAjZmZmOw0KfQ0KI3N2ZyB7DQogIGhlaWdodDogMTAwJTsNCiAgd2lkdGg6IDEwMCU7DQp9DQoudGFncyB7DQogIHBvc2l0aW9uOiBmaXhlZDsNCiAgdG9wOiAwOw0KICBsZWZ0OiAwOw0KICByaWdodDogMDsNCiAgcGFkZGluZzogMTBweDsNCiAgbWluLWhlaWdodDogMjBweDsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM1NTU7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmYwZjsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KfQ0KDQouYnV0dG9uLW5ldy10YWcgew0KICBtYXJnaW4tbGVmdDogMTBweDsNCiAgaGVpZ2h0OiAyMHB4Ow0KICBwYWRkaW5nOiAwIDVweDsNCiAgbGluZS1oZWlnaHQ6IDE5cHg7DQp9DQo="},{"version":3,"sources":["AddTemplate.vue"],"names":[],"mappingsghBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"AddTemplate.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"content\">\r\n    <div class=\"tags\">\r\n      <div\r\n        style=\"\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          width: 100%;\r\n        \"\r\n      >\r\n        <div style=\"flex: 1\">\r\n          <el-button\r\n            type=\"primary\"\r\n            class=\"button-new-tag\"\r\n            size=\"small\"\r\n            @click=\"open1()\"\r\n            >新建节点</el-button\r\n          >\r\n          <el-button\r\n            type=\"primary\"\r\n            class=\"button-new-tag\"\r\n            size=\"small\"\r\n            style=\"margin-right: 20px\"\r\n            @click=\"open2()\"\r\n            >新建连线</el-button\r\n          >\r\n          <el-tag\r\n            v-for=\"(it, i) in tags\"\r\n            :key=\"i\"\r\n            type=\"info\"\r\n            size=\"mini\"\r\n            effect=\"dark\"\r\n            style=\"margin-left: 10px; cursor: pointer\"\r\n            :color=\"it.style.fill\"\r\n            >{{ it.type }}</el-tag\r\n          >\r\n        </div>\r\n        <div>\r\n          <el-button\r\n            type=\"success\"\r\n            class=\"button-new-tag\"\r\n            size=\"small\"\r\n            @click=\"open3()\"\r\n            >保存模板</el-button\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div ref=\"svgDiv\" id=\"svg\" :class=\"svgFocus ? 'cfocus' : ''\"></div>\r\n\r\n    <el-dialog\r\n      class=\"dialog-index\"\r\n      :visible=\"visible\"\r\n      title=\"节点信息\"\r\n      :close-on-click-modal=\"false\"\r\n      @close=\"close\"\r\n      destroy-on-close\r\n      width=\"500px\"\r\n    >\r\n      <el-form\r\n        label-width=\"100px\"\r\n        ref=\"tagform\"\r\n        :model=\"tagform\"\r\n        :rules=\"tagRules\"\r\n        size=\"mini\"\r\n      >\r\n        <el-form-item label=\"节点名\" prop=\"type\">\r\n          <el-input\r\n            maxlength=\"50\"\r\n            v-model=\"tagform.type\"\r\n            placeholder=\"请输入节点名\"\r\n            @blur=\"setColor\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-row>\r\n          <el-col :span=\"24\">\r\n            <el-form-item label=\"properties\" prop=\"properties\">\r\n              <input-prop\r\n                ref=\"inputProp\"\r\n                :showPropList=\"false\"\r\n                v-model=\"tagform.properties\"\r\n              />\r\n              <!-- <el-select\r\n                style=\"width: 100%\"\r\n                v-model=\"tagform.properties\"\r\n                multiple\r\n                filterable\r\n                allow-create\r\n                default-first-option=\"\"\r\n                no-data-text=\"录入属性名，按回车键填充\"\r\n                placeholder=\"请录入节点属性\"\r\n              ></el-select> -->\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"填充颜色\" prop=\"fill\">\r\n              <el-color-picker\r\n                :predefine=\"predefineColors\"\r\n                style=\"width: 100%\"\r\n                v-model=\"tagform.fill\"\r\n              ></el-color-picker>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"描边颜色\" prop=\"stroke\">\r\n              <el-color-picker\r\n                style=\"width: 100%\"\r\n                v-model=\"tagform.stroke\"\r\n              ></el-color-picker>\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button size=\"small\" @click=\"close()\">取 消</el-button>\r\n        <el-button v-if=\"tagform.id\" size=\"small\" @click=\"delNode()\"\r\n          >删 除</el-button\r\n        >\r\n        <el-button size=\"small\" type=\"primary\" @click=\"ok()\">保 存</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <el-dialog\r\n      class=\"dialog-index\"\r\n      :visible=\"visible2\"\r\n      title=\"连线信息\"\r\n      :close-on-click-modal=\"false\"\r\n      @close=\"close2\"\r\n      destroy-on-close\r\n      width=\"500px\"\r\n    >\r\n      <div>\r\n        <el-row v-for=\"(v, i) in tempLinks\" :key=\"i\" :gutter=\"8\">\r\n          <el-col :span=\"7\">\r\n            <el-select v-model=\"v.source\" size=\"mini\" placeholder=\"source\">\r\n              <el-option\r\n                v-for=\"(v, i) in nodes\"\r\n                :key=\"i\"\r\n                :label=\"v.name\"\r\n                :value=\"v.id\"\r\n              ></el-option>\r\n            </el-select>\r\n          </el-col>\r\n          <el-col :span=\"6\">\r\n            <el-input\r\n              maxlength=\"50\"\r\n              v-model=\"v.type\"\r\n              size=\"mini\"\r\n              placeholder=\"关系描述\"\r\n            ></el-input>\r\n          </el-col>\r\n          <el-col :span=\"7\">\r\n            <el-select v-model=\"v.target\" size=\"mini\" placeholder=\"target\">\r\n              <el-option\r\n                v-for=\"(v, i) in nodes\"\r\n                :key=\"i\"\r\n                :label=\"v.name\"\r\n                :value=\"v.id\"\r\n              ></el-option>\r\n            </el-select>\r\n          </el-col>\r\n          <el-col :span=\"2\">\r\n            <el-color-picker\r\n              size=\"mini\"\r\n              style=\"width: 100%\"\r\n              v-model=\"v.color\"\r\n            ></el-color-picker>\r\n          </el-col>\r\n          <el-col :span=\"2\">\r\n            <el-button size=\"mini\" type=\"text\" @click=\"delLink(i)\"\r\n              >删除</el-button\r\n            >\r\n          </el-col>\r\n        </el-row>\r\n        <div>\r\n          <el-button type=\"text\" size=\"small\" @click=\"addLink\"\r\n            >新增连线</el-button\r\n          >\r\n        </div>\r\n      </div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button size=\"small\" @click=\"close2()\">取 消</el-button>\r\n        <el-button size=\"small\" type=\"primary\" @click=\"ok2()\">保 存</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DrawForce from \"@/plugins/drawForce\";\r\nimport axios from \"axios\";\r\nimport InputProp from \"./InputProp\";\r\n\r\nlet timer;\r\nlet id = 1;\r\nlet colori = 0;\r\nexport default {\r\n  name: \"AddTemplate\",\r\n  inject: [\"reload\"],\r\n  components: { InputProp },\r\n  data() {\r\n    return {\r\n      visible: false,\r\n      visible2: false,\r\n      nodes: [],\r\n      links: [],\r\n      tempLinks: [],\r\n      predefineColors: [\r\n        \"#ffcf3c\",\r\n        \"#c990c0\",\r\n        \"#f79767\",\r\n        \"#57c7e3\",\r\n        \"#f16667\",\r\n        \"#d9c8ae\",\r\n        \"#8dcc93\",\r\n        \"#ecb5c9\",\r\n        \"#4c8eda\",\r\n        \"#ffc454\",\r\n        \"#da7194\",\r\n        \"#569480\",\r\n      ],\r\n      tagform: {\r\n        id: null,\r\n        properties: {},\r\n        size: \"\",\r\n        fill: \"\",\r\n        stroke: \"\",\r\n        type: \"\",\r\n      },\r\n      tagRules: {\r\n        type: [{ required: true, message: \"请输入节点名\", trigger: \"blur\" }],\r\n        fill: [\r\n          { required: true, message: \"请选择一个填充颜色\", trigger: \"change\" },\r\n        ],\r\n        stroke: [\r\n          { required: true, message: \"请选择一个描边颜色\", trigger: \"change\" },\r\n        ],\r\n      },\r\n      svgFocus: false,\r\n      d: null,\r\n    };\r\n  },\r\n  computed: {\r\n    tags () {\r\n      let arr = []\r\n      let typeArr = []\r\n      if (this.nodes) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n          const it = this.nodes[i];\r\n          if (!typeArr.includes(it.type)) {\r\n            arr.push(it)\r\n            typeArr.push(it.type)\r\n          }\r\n        }\r\n      }\r\n      return arr\r\n    }\r\n  },\r\n  methods: {\r\n    getPredefineColors() {\r\n      return this.predefineColors[colori++]\r\n    },\r\n    open1(row) {\r\n      row = row || {};\r\n      this.tagform = {\r\n        id: row.id || null,\r\n        name: row.name || \"\",\r\n        properties: row.properties || { name: \"\" },\r\n        size: row.size || \"\",\r\n        fill: (row.style || {}).fill || this.getPredefineColors(),\r\n        stroke: (row.style || {}).stroke || \"#FFFFFF\",\r\n        type: row.type || \"\",\r\n      };\r\n      if (colori >= this.predefineColors.length) colori = 0;\r\n      this.visible = true;\r\n    },\r\n    close() {\r\n      this.visible = false;\r\n    },\r\n    delNode() {\r\n      let d = this.tagform;\r\n      this.$confirm(\"确定删除节点\" + d.name + \"和相关连线的吗？\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          this.nodes = this.nodes.filter((v) => v.id != d.id);\r\n          this.links = this.links.filter((v) => {\r\n            return v.target != d.id && v.source != d.id;\r\n          });\r\n          this.close();\r\n          this.updateD3();\r\n        })\r\n        .catch(() => {});\r\n    },\r\n    ok() {\r\n      this.$refs.tagform.validate((valid) => {\r\n        if (valid) {\r\n          let d = this.tagform;\r\n          if (/^\\d+/.test(d.type)) {\r\n            this.$message.warning(\"节点名不能以数字为开头\");\r\n            return;\r\n          }\r\n          if (this.$refs.inputProp.emitInput()) {\r\n            return;\r\n          }\r\n          this.$nextTick(() => {\r\n            let objName = \"\"; // 圆圈上显示的内容\r\n            let properties = d.properties || {};\r\n            for (const key in properties) {\r\n              if (\r\n                Object.hasOwnProperty.call(properties, key) &&\r\n                properties[key]\r\n              ) {\r\n                objName = properties[key];\r\n              }\r\n            }\r\n            if (!objName) {\r\n              this.$message.warning(\"properties至少需要录入一条内容\");\r\n              return;\r\n            }\r\n            // if (!(d.properties||{}).name) {\r\n            //   this.$message.warning('请录入properties中name的值')\r\n            //   return\r\n            // }\r\n            let index;\r\n            for (let i = 0; i < this.nodes.length; i++) {\r\n              const it = this.nodes[i];\r\n              // if (!d.id && this.nodes[i].type == d.type) {\r\n              //   this.$message.warning('节点名已存在')\r\n              //   return\r\n              // }\r\n              if (it.id == d.id) {\r\n                index = i;\r\n              }\r\n              if (it.type == this.tagform.type) {\r\n                  it.style = { fill: d.fill, stroke: d.stroke }\r\n              }\r\n            }\r\n            let nodes = {\r\n              id: d.id || id++ + \"\",\r\n              name: objName,\r\n              style: { fill: d.fill, stroke: d.stroke },\r\n              type: d.type,\r\n              size: \"20\",\r\n              properties: d.properties,\r\n            };\r\n            if (index != undefined) {\r\n              this.nodes[index] = nodes;\r\n            } else {\r\n              this.nodes.push(nodes);\r\n            }\r\n            this.close();\r\n            this.updateD3();\r\n          });\r\n        }\r\n      });\r\n    },\r\n    setColor() {\r\n      if(this.tagform.type) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n          const it = this.nodes[i];\r\n          if(it.type == this.tagform.type) {\r\n            this.tagform.fill = it.style.fill\r\n            this.tagform.stroke = it.style.stroke\r\n            break\r\n          }\r\n        }\r\n      }\r\n    },\r\n    open2() {\r\n      this.tempLinks = JSON.parse(JSON.stringify(this.links));\r\n      this.visible2 = true;\r\n    },\r\n    close2() {\r\n      this.visible2 = false;\r\n    },\r\n    ok2() {\r\n      let links = [];\r\n      for (let i = 0; i < this.tempLinks.length; i++) {\r\n        const it = this.tempLinks[i];\r\n        if (!it.target || !it.source || !it.type) {\r\n          this.$message.warning(\"请补全信息！\");\r\n          return;\r\n        }\r\n        if (/^\\d+/.test(it.type)) {\r\n          this.$message.warning(\"关系描述不能以数字为开头\");\r\n          return true;\r\n        }\r\n        if (!it.color) {\r\n          this.$message.warning(\"请选择颜色！\");\r\n          return;\r\n        }\r\n        if (it.source == it.target) {\r\n          this.$message.warning(\"source和target不能为同一个节点！\");\r\n          return;\r\n        }\r\n        if (\r\n          links.includes(it.source + it.target)\r\n          // || links.includes(it.target + it.source)\r\n        ) {\r\n          this.$message.warning(\"有重复的连线！\");\r\n          return;\r\n        }\r\n        links.push(it.source + it.target);\r\n        // links.push(it.target + it.source);\r\n      }\r\n      this.links = this.tempLinks;\r\n      this.close2();\r\n      this.updateD3();\r\n    },\r\n    updateD3() {\r\n      this.d.update({\r\n        nodes: JSON.parse(JSON.stringify(this.nodes)),\r\n        links: JSON.parse(JSON.stringify(this.links)),\r\n      });\r\n    },\r\n    addLink() {\r\n      this.tempLinks.push({\r\n        id: id++ + \"\",\r\n        source: \"\",\r\n        size: \"1\",\r\n        color: \"#545454\",\r\n        type: \"\",\r\n        target: \"\",\r\n      });\r\n    },\r\n    delLink(i) {\r\n      this.tempLinks.splice(i, 1);\r\n    },\r\n    // 初始化D3\r\n    startD3(nodes, links) {\r\n      this.d = DrawForce.init(\"svg\", {\r\n        width: window.document.body.offsetWidth,\r\n        height: window.document.body.offsetHeight,\r\n        nodes,\r\n        links,\r\n        svgClick: this.svgClick,\r\n        textClick: this.open2,\r\n      });\r\n    },\r\n    reset() {\r\n      this.$refs.svgDiv.innerHTML = \"\";\r\n    },\r\n    open3() {\r\n      if (this.nodes && this.nodes.length > 1) {\r\n        let ids = this.nodes.map((v) => v.id);\r\n\r\n        for (let i = 0; i < this.links.length; i++) {\r\n          const it = this.links[i];\r\n          let idi1 = ids.indexOf(it.target);\r\n          if (idi1 > -1) {\r\n            ids.splice(idi1, 1);\r\n          }\r\n          let idi2 = ids.indexOf(it.source);\r\n          if (idi2 > -1) {\r\n            ids.splice(idi2, 1);\r\n          }\r\n        }\r\n        if (ids.length > 0) {\r\n          this.$message.warning(\"所有节点都需要添加连接，请检查！\");\r\n          return;\r\n        }\r\n        this.$prompt(\"请输入模板名\", \"提示\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          inputPattern: /.{0,50}?/,\r\n          inputErrorMessage: \"模板名格式不正确\",\r\n        })\r\n          .then(({ value }) => {\r\n            let data = {\r\n              modelname: value,\r\n              nodes: this.nodes,\r\n              edges: this.links,\r\n            };\r\n            axios\r\n              .get(\r\n                \"/saveModel?modelString=\" +\r\n                  encodeURIComponent(JSON.stringify(data))\r\n              )\r\n              .then(function (response) {\r\n                this.$message.success(\"保存成功\");\r\n                console.log(response);\r\n              })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n              });\r\n            // 调接口\r\n          })\r\n          .catch(() => {});\r\n      } else {\r\n        this.$message.warning(\"至少需要两个节点！\");\r\n      }\r\n    },\r\n    windowResize() {\r\n      if (timer) clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        this.reset();\r\n        timer = undefined;\r\n        this.startD3(this.nodes, this.links);\r\n      }, 300);\r\n    },\r\n    // 点击svg时的处理\r\n    svgClick(data) {\r\n      if (data) {\r\n        this.open1(data);\r\n      }\r\n      this.d.highlightObject();\r\n      this.svgFocus = false;\r\n    },\r\n    setData() {\r\n      this.nodes = [];\r\n      this.links = [];\r\n      this.startD3(this.nodes, this.links);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.setData();\r\n    window.addEventListener(\"resize\", this.windowResize);\r\n  },\r\n  destroyed() {\r\n    window.removeEventListener(\"resize\", this.windowResize);\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.content {\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow-y: hidden;\r\n  background-color: #2e2d2d;\r\n  color: #fff;\r\n}\r\n#svg {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.tags {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  padding: 10px;\r\n  min-height: 20px;\r\n  border-bottom: 1px solid #555;\r\n  background-color: #ffffff0f;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.button-new-tag {\r\n  margin-left: 10px;\r\n  height: 20px;\r\n  padding: 0 5px;\r\n  line-height: 19px;\r\n}\r\n</style>\r\n"]}]}