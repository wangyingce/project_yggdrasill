{"remainingRequest":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/components/AddTemplate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/components/AddTemplate.vue","mtime":1620638042000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}