{"remainingRequest":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/thread-loader/dist/cjs.js!/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/babel-loader/lib/index.js!/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/plugins/drawForce.js","dependencies":[{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/src/plugins/drawForce.js","mtime":1620638042000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/eruda/Documents/GitHub/project_yggdrasill/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}